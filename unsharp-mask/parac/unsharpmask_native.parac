/*
  Copyright (c) 2016.
  All rights reserved.

  Written and provided by: 
  Xingjing Lu, ICT, CAS.

  Based the unsharp_mask_polymage_native.cpp, which is written by
  Ravi Teja Mullapudi, Vinay Vasisa, Uday Bondhugula.
  
*/

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include<math.h>

#define M 2048
#define N 2048
#define O 3
#define PADM 2052
#define PADN 2052


  void 
pipeline_mask(int R, int C, float threshold, float weight,
    parac_matrix float &img[PADM][PADN], 
    parac_matrix float &mask[M][N],
    parac_matrix float &blurx[M][PADN],
    parac_matrix float &blury[M][N],
    parac_matrix float &sharpen[M][N]
    )
{
 
#if 0
  parac_matrix float blurx[M][PADN];
  parac_matrix float blury[M][N];
  parac_matrix float sharpen[M][N];
#endif

  parac_matrix float filterx[5][1] = {0.0625f, 0.25f, 0.375f, 0.25f, 0.0625f};
  parac_matrix float filtery[1][5] = {0.0625f, 0.25f, 0.375f, 0.25f, 0.0625f};

  parac_iterator it(iter_element; 2:2049:1; 0:2051:1){
    blurx[itx-2][ity] = convolution(img[itx-2:5:1][ity], filterx);
  }

  parac_iterator it1(iter_element; 2:2049:1; 2:2049:1){
    blury[it1x-2][it1y-2] = convolution(blurx[it1x-2][it1y-2:5:1], filtery);
  }


#if 1
  parac_iterator it2(iter_element; 2:2049:1; 2:2049:1){
    sharpen[it2x-2][it2y-2] = img[it2x][it2y] * (1+weight)
      - blury[it2x-2][it2y-2]*weight;
    float _ct0 = img[it2x][it2y];
    float _ct1 = sharpen[it2x-2][it2y-2];
    float _ct2 =(( img[it2x][it2y] - blury[it2x-2][it2y-2]) < threshold)? _ct0 : _ct1;
    //float _ct2 =(abs( img[it2x][it2y] - blury[it2x-2][it2y-2]) < threshold)? _ct0 : _ct1;
    //float _ct2 =(abs( img[it2x][it2y] - blury[it2x-2][it2y-2]) < threshold)? img[it2x][it2y]:sharpen[it2x-2][it2y-2];
    mask[it2x-2][it2y-2] = _ct2;
  }
#endif

#if 0
  parac_iterator(iter_element; 2:2049:1; 2:2049:1){
    float _ct0 = img[itx][ity];
    flaot _ct1 = sharpen[itx-2][ity-2];
    float _ct2 =(std::abs( img[itx][ity] - blury[itx-2][ity-2]) < threshold)? _ct0:_ct1;
    mask[itx-2][ity-2] = _ct2;
  }
#endif

}


int main()
{
  int nruns = 6, rows = 0, cols = 0, c = 0, channel = 3;
  int row_base, col_base;
  float *image_src, *image_ghost_src, *res_src;
  float *blurx_src, *blury_src, *mask_src, *sharpen_src;
  float threshold = 0.000001;
  int weight = 4;

  image_src = (float*) malloc( sizeof(float)*M*N);
  res_src = (float*) malloc( sizeof(float)*M*N);
  blurx_src = (float*) malloc (sizeof(float)*M*PADN);
  blury_src = (float*) malloc (sizeof(float)*M*N);
  sharpen_src = (float*) malloc (sizeof(float)*M*N);
  
  rows = M;
  cols = N;
  channel = O;
  
  // get image roi, not needed.
  row_base = (M - rows)/2;
  col_base = (N - cols)/2;

  // create ghost zones.
 int total_pad = 4;
 image_ghost_src = (float*) malloc ( sizeof(float) * (rows+4) * (cols+4) );
   for( int i = 0; i < M; i++){
     memcpy( image_ghost_src + (i+2)*(cols+4) + 2, image_src+i*cols, cols );
   }


 // init data of image.
  for( int i = 0; i < M; i++ )
    for( int j = 0; j < N; j++ ){
      image_src[i*cols+j] = (float)(rand()%255);
      image_ghost_src[i*(cols+4)+j+2] =  image_src[i*cols+j];
    }

  parac_matrix float &image_ghost[PADM][PADN] = image_ghost_src;
  parac_matrix float &res[M][N] = res_src;
  parac_matrix float &blurx[M][PADN] = blurx_src;
  parac_matrix float &blury[M][N] = blury_src;
  parac_matrix float &sharpen[M][N] = sharpen_src;

  pipeline_mask(cols, rows, threshold, weight, 
      image_ghost, res, blurx, blury, sharpen);


  return 0;
}
