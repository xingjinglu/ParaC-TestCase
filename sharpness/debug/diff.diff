126,127c126,127
<     if (gidx == 1024 / 4 - 1) {
<              *dstImageDSDt1 = *srcImageSrcDt3;
---
>     if (gidy == (1024 / 4)-1) {
>                    *dstImageDSDt1 = *srcImageSrcDt3;
144c144
<       *( (float*)Result1 + i*1+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j * sizeof(float) )) * *(srcImageSrcDt5); 
---
>       *( (float*)Result1 + i*1+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt5); 
150c150
<       *( (float*)Result2 + i*1+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j * sizeof(float) )) * *(srcImageSrcDt3); 
---
>       *( (float*)Result2 + i*1+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt3); 
159,160c159,160
<       for(int i=0;i<4;i++)
<       *( (__global unsigned char*)( (__global char*)dstImageDSDt2 + i * dstImageDSStep) ) = *( (  float*)( ( char*)Result3 + i * 1 * sizeof(float)) );
---
>       for(int j=0;j<4;j++)
>       *(dstImageDSDt2 + j *dstImageDSStep ) = *( ( float*)Result3 + j);
163,164c163,164
<       *( (__global unsigned char*)( (__global char*)dstImageDSDt1 + i * dstImageDSStep) ) = *( ( __global unsigned char*)( (__global char*)dstImageDSDt2 + i * dstImageDSStep) );
<             
---
>       *(dstImageDSDt1 + i * dstImageDSStep) = *(  dstImageDSDt2 + i * dstImageDSStep );
>              
168c168
<       *( (float*)Result4 + i*1+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j * sizeof(float) )) * *(srcImageSrcDt6); 
---
>       *( (float*)Result4 + i*1+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt6); 
174c174
<       *( (float*)Result5 + i*1+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j * sizeof(float) )) * *(srcImageSrcDt4); 
---
>       *( (float*)Result5 + i*1+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt4); 
183,184c183,184
<       for(int i=0;i<4;i++)
<       *( (__global unsigned char*)( (__global char*)dstImageDSDt3 + i * dstImageDSStep) ) = *( (  float*)( ( char*)Result6 + i * 1 * sizeof(float)) );
---
>       for(int j=0;j<4;j++)
>       *(dstImageDSDt3 + j * dstImageDSStep) = *( ( float*)Result6 + j);
187,188c187,188
<       *( (__global unsigned char*)( (__global char*)dstImageDSDt4 + i * dstImageDSStep) ) = *( ( __global unsigned char*)( (__global char*)dstImageDSDt3 + i * dstImageDSStep) );
<           }
---
>       *(dstImageDSDt4 + i * dstImageDSStep) = *(  dstImageDSDt3 + i * dstImageDSStep);
>            }
256c256
<     if (gidy == 1024 / 4 - 1) {
---
>     if (gidx == 1024 / 4 - 1) {
270c270
<       *( (float*)Result1 + i*4+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j * sizeof(float) )) * *(srcImageSrcDt4); 
---
>       *( (float*)Result1 + i*0+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt4); 
271a272
> 
276c277
<       *( (float*)Result2 + i*4+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j * sizeof(float) )) * *(srcImageSrcDt3); 
---
>       *( (float*)Result2 + i*0+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt3); 
285,288c286,289
<       for(int j=0;j<4;j++)
<       *(dstImageDSDt3 + j + 0 * dstImageDSStep) = *(( float*)Result3 + j+ 0 * sizeof(float));
<       //*( (__global unsigned char*)((__global char*)dstImageDSDt3 + j * sizeof(unsigned char)) ) = *( ( float*)( ( char*)(Result3 + j * sizeof(float)) ));
<       
---
>       for(int i=0;i<1;i++)
>       for(int j=0;j<4;j++){
>       *(dstImageDSDt3 + j + i * dstImageDSStep) = *(( float*)Result3 + j+i * sizeof(float));
>       }      
291,292c292
<       //*( (__global unsigned char*)((__global char*)dstImageDSDt1 + j * sizeof(unsigned char)) ) = *( (__global unsigned char*)( (__global char*)(dstImageDSDt3 + j * sizeof(unsigned char)) ));
<             
---
>              
296c296
<       *( (float*)Result4 + i*4+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j * sizeof(float) )) * *(srcImageSrcDt6); 
---
>       *( (float*)Result4 + i*0+j) = *( (__global float*)((__global char*)border_mp_1SrcDt2+ i*border_mp_1SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt6); 
302c302
<       *( (float*)Result5 + i*4+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j * sizeof(float) )) * *(srcImageSrcDt5); 
---
>       *( (float*)Result5 + i*0+j) = *( (__global float*)((__global char*)border_mp_0SrcDt1+ i*border_mp_0SrcStep+j*sizeof(float)) ) * *(srcImageSrcDt5); 
304a305
> 
310a312,315
>       for(int i=0;i<1;i++)
>       for(int j=0;j<4;j++){
>       *(dstImageDSDt5 + j + i * dstImageDSStep) = *(( float*)Result6 + j + i * i * sizeof(float));
>       }      
312,318c317,318
<       *(dstImageDSDt5 + j + 0 * dstImageDSStep) = *(( float*)Result6 + j + 0 *  sizeof(float));;
<       //*( (__global unsigned char*)((__global char*)dstImageDSDt5 + j * sizeof(unsigned char)) ) = *( ( float*)( ( char*)(Result6 + j * sizeof(float)) ));
<       
<       for(int j=0;j<4;j++)
<       *(dstImageDSDt7 + j) = *( ( __global unsigned char*)dstImageDSDt5 + j);;
<       //*( (__global unsigned char*)((__global char*)dstImageDSDt7 + j * sizeof(unsigned char)) ) = *( (__global unsigned char*)( (__global char*)(dstImageDSDt5 + j * sizeof(unsigned char)) ));
<           }
---
>       *(dstImageDSDt7 + j) = *( ( __global unsigned char*)dstImageDSDt5 + j);
>            }
346c346
<   if (gidx >= 255 || gidy >= 255)
---
>   if (gidx >= 256-1 || gidy >= 256-1)
354c354
<   __global float *mpSrcDt1 = (__global char *)mpSrc + mpSrcShift;
---
>   __global float *mpSrcDt1 = (__global char*)mpSrc + mpSrcShift;
360,384c360,409
<         float result0[4][4];
<     float *result0_0;
<     float *result0_1;
<     float *result0_2;
<     float *result0_3;
<        result0_0 = (float*)result0;
<        result0_1 = result0_0 + sizeof(float) * 4;
<        result0_2 = result0_1 + sizeof(float) * 4;
<        result0_3 = result0_2 + sizeof(float) * 4;
<        *(result0_0+0) = (float)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) +     (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
<        *(result0_0+1) = (float)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
<        *(result0_0+2) = (float)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
<        *(result0_0+3) = (float)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
<        *(result0_1+0) = (float)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
<        *(result0_1+1) = (float)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
<        *(result0_1+2) = (float)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
<        *(result0_1+3) = (float)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
<        *(result0_2+0) = (float)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
<        *(result0_2+1) = (float)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
<        *(result0_2+2) = (float)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
<        *(result0_2+3) = (float)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
<        *(result0_3+0) = (float)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
<        *(result0_3+1) = (float)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
<        *(result0_3+2) = (float)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
<        *(result0_3+3) = (float)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
---
>         char result0[4][4];
>         char *result0_0;
>         char *result0_1;
>         char *result0_2;
>         char *result0_3;
> 
>        result0_0 = (char*)result0;
>        result0_1 = result0_0 + sizeof(char) * 4;
>        result0_2 = result0_1 + sizeof(char) * 4;
>        result0_3 = result0_2 + sizeof(char) * 4;
> 
>        mpSrcStep = mpSrcStep/4;
> 
>     //float mp[4][2] = { 7 / 8.0f, 1 / 8.0f, 5 / 8.0f, 3 / 8.0f, 3 / 8.0f, 5 / 8.0f, 1 / 8.0f, 7 / 8.0f };
> 
>        *(result0_0+0) = (char)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) 
>                                 +  (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) 
>                                 +  (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) 
>                                 +  (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
> 
>        *(result0_0+1) = (char)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) 
>                                  + (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) 
>                                  + (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) 
>                                  + (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
> 
>        *(result0_0+2) = (char)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) 
>                                  + (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) 
>                                  + (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) 
>                                  + (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
> 
>        *(result0_0+3) = (char)(    (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) 
>                              +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) 
>                              +     (*(mpSrcDt1+0+0*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) 
>                              +     (*(mpSrcDt1+1+0*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
>        *(result0_1+0) = (char)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) 
>                              +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) 
>                              +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) 
>                              +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
> 
>        *(result0_1+1) = (char)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
>        *(result0_1+2) = (char)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
>        *(result0_1+3) = (char)(    (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+1*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+1*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
>        *(result0_2+0) = (char)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
>        *(result0_2+1) = (char)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
>        *(result0_2+2) = (char)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
>        *(result0_2+3) = (char)(    (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+2*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+2*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
>        *(result0_3+0) = (char)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+0*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+0*mpSrcStep));
>        *(result0_3+1) = (char)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+1*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+1*mpSrcStep));
>        *(result0_3+2) = (char)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+2*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+2*mpSrcStep));
>        *(result0_3+3) = (char)(    (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+0+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+0+1*srcImageSrcStep) ))     * *(mpSrcDt1+0+3*mpSrcStep) +     (*(mpSrcDt1+0+3*mpSrcStep) * *(srcImageSrcDt2+1+0*srcImageSrcStep) +     (*(mpSrcDt1+1+3*mpSrcStep) * *(srcImageSrcDt2+1+1*srcImageSrcStep) ))     * *(mpSrcDt1+1+3*mpSrcStep));
388,389c413,414
<     *( (__global unsigned char*)( (__global char*)dstImageDstDt1 + i * dstImageDstStep + j) ) = *( ( float*)( ( char*) (result0 + j * sizeof(float)  + i * 4 * sizeof(float))));
<     }      }
---
>     *(dstImageDstDt1 + j + i * dstImageDstStep) = *(( char*)result0 + j + i * 4 * sizeof(char));
>     }       }
421c446
<   if ( gidx   >=  (1024/4) || gidy >= 1024)
---
>   if (gidx >= 256 || gidy >= 1024)
425,426c450,454
<   int yPlaneSrcIdx3 = yPlaneSrcShift + ((float)gidy + -1) *yPlaneSrcStep + ((float)gidx *4 + -1) *sizeof(unsigned char);
<   int pEdgeDstIdx1 = pEdgeDstShift + ((float)gidy) *pEdgeDstStep + ((float)gidx *4) *sizeof(unsigned short);
---
>   //int yPlaneSrcIdx3 = yPlaneSrcShift + ((float)gidy -1) *yPlaneSrcStep + ((float)gidx -1) *sizeof(unsigned char);
> 
>   int yPlaneSrcIdx3 = yPlaneSrcShift + ((float)gidy -1) *yPlaneSrcStep + ((float)gidx*4 -1) *sizeof(unsigned char);
> 
>   int pEdgeDstIdx1 = pEdgeDstShift + ((float)gidy) *pEdgeDstStep + ((float)gidx*4) *sizeof(unsigned short);
430a459
> 
432c461,467
<   __global unsigned short *pEdgeDstDt1 = (__global char *)pEdgeDst + pEdgeDstIdx1;
---
>   __global unsigned short *pEdgeDstDt1 = (__global unsigned short*)((__global char*)pEdgeDst + pEdgeDstIdx1);
> 
>   if(gidy == 0 || gidy == 1023)
>   {
>       *((global short4*)(pEdgeDstDt1))= (short4)0;
>       return;
>   }
437,439c472,474
<     char4 yPlane;
<     char  R2Next;
<     short4 res1;
---
>     uchar4 yPlane;
>     uchar  R2Next;
>     short4 res;
441,447c476,490
<       gy[0] = *(gySrcDt2 + 0 + gySrcStep * 0);
<       gy[1] = *(gySrcDt2 + 1 + gySrcStep * 0);
<       gy[2] = *(gySrcDt2 + 2 + gySrcStep * 0);
<       yPlane = convert_char4(vload4(0, yPlaneSrcDt3 + 0 * yPlaneSrcStep + 4 * 0));
<       res1.s0 = gy[0] * yPlane.s0 + gy[1] * yPlane.s1 + gy[2] * yPlane.s2;
<       res1.s1 = gy[0] * yPlane.s1 + gy[1] * yPlane.s2 + gy[2] * yPlane.s3;
<       res1.s2 = gy[0] * yPlane.s2 + gy[1] * yPlane.s3;
---
> 
>       gy[0] = *(gySrcDt2 + 0 + gxSrcStep * 0);
>       gy[1] = *(gySrcDt2 + 1 + gxSrcStep * 0);
>       gy[2] = *(gySrcDt2 + 2 + gxSrcStep * 0);
>         /*
>       gy[0] = *(gySrc + 0 + 3 * 0);
>       gy[1] = *(gySrc + 1 + 3 * 0);
>       gy[2] = *(gySrc + 2 + 3 * 0);
>       */
>       yPlane = vload4(0, yPlaneSrcDt3 + 4 * 0);
> 
>       res.s0 = gy[0] * yPlane.s0 + gy[1] * yPlane.s1 + gy[2] * yPlane.s2;
>       res.s1 = gy[0] * yPlane.s1 + gy[1] * yPlane.s2 + gy[2] * yPlane.s3;
>       res.s2 = gy[0] * yPlane.s2 + gy[1] * yPlane.s3;
> 
449,450c492,494
<       res1.s2 += gy[2] * R2Next; 
<       res1.s3 = gy[0] * yPlane.s3;
---
>       res.s2 += gy[2] * R2Next; 
> 
>       res.s3 = gy[0] * yPlane.s3;
452c496
<       res1.s3 += gy[1] * R2Next; 
---
>       res.s3 += gy[1] * R2Next; 
454,461c498,509
<       res1.s3 += gy[2] * R2Next; 
<       gy[0] = *(gySrcDt2 + 0 + gySrcStep * 1);
<       gy[1] = *(gySrcDt2 + 1 + gySrcStep * 1);
<       gy[2] = *(gySrcDt2 + 2 + gySrcStep * 1);
<       yPlane = convert_char4(vload4(0, yPlaneSrcDt3 + 1 * yPlaneSrcStep + 4 * 0));
<       res1.s0 += gy[0] * yPlane.s0 + gy[1] * yPlane.s1 + gy[2] * yPlane.s2;
<       res1.s1 += gy[0] * yPlane.s1 + gy[1] * yPlane.s2 + gy[2] * yPlane.s3;
<       res1.s2 += gy[0] * yPlane.s2 + gy[1] * yPlane.s3;
---
>       res.s3 += gy[2] * R2Next; 
> 
>       yPlaneSrcDt3 = yPlaneSrcDt3 + yPlaneSrcStep;
>       gy[0] = *(gySrcDt2 + 0 + gxSrcStep * 1);
>       gy[1] = *(gySrcDt2 + 1 + gxSrcStep * 1);
>       gy[2] = *(gySrcDt2 + 2 + gxSrcStep * 1);
>       yPlane = vload4(0, yPlaneSrcDt3 + 4 * 0);
> 
>       res.s0 += gy[0] * yPlane.s0 + gy[1] * yPlane.s1 + gy[2] * yPlane.s2;
>       res.s1 += gy[0] * yPlane.s1 + gy[1] * yPlane.s2 + gy[2] * yPlane.s3;
>       res.s2 += gy[0] * yPlane.s2 + gy[1] * yPlane.s3;
> 
463,464c511,512
<       res1.s2 += gy[2] * R2Next; 
<       res1.s3 += gy[0] * yPlane.s3;
---
>       res.s2 += gy[2] * R2Next; 
>       res.s3 += gy[0] * yPlane.s3;
466c514
<       res1.s3 += gy[1] * R2Next; 
---
>       res.s3 += gy[1] * R2Next; 
468,475c516,528
<       res1.s3 += gy[2] * R2Next; 
<       gy[0] = *(gySrcDt2 + 0 + gySrcStep * 2);
<       gy[1] = *(gySrcDt2 + 1 + gySrcStep * 2);
<       gy[2] = *(gySrcDt2 + 2 + gySrcStep * 2);
<       yPlane = convert_char4(vload4(0, yPlaneSrcDt3 + 2 * yPlaneSrcStep + 4 * 0));
<       res1.s0 += gy[0] * yPlane.s0 + gy[1] * yPlane.s1 + gy[2] * yPlane.s2;
<       res1.s1 += gy[0] * yPlane.s1 + gy[1] * yPlane.s2 + gy[2] * yPlane.s3;
<       res1.s2 += gy[0] * yPlane.s2 + gy[1] * yPlane.s3;
---
>       res.s3 += gy[2] * R2Next; 
> 
>       yPlaneSrcDt3 = yPlaneSrcDt3 + yPlaneSrcStep;
>       gy[0] = *(gySrcDt2 + 0 + gxSrcStep * 2);
>       gy[1] = *(gySrcDt2 + 1 + gxSrcStep * 2);
>       gy[2] = *(gySrcDt2 + 2 + gxSrcStep * 2);
>       //yPlane = *(yPlaneSrcDt3 + 4 * 0);
>       //yPlane = *((__global uchar4*)(yPlaneSrcDt3 + 4 * 0));
>       yPlane = vload4(0, yPlaneSrcDt3 + 4 * 0);
>       res.s0 += gy[0] * yPlane.s0 + gy[1] * yPlane.s1 + gy[2] * yPlane.s2;
>       res.s1 += gy[0] * yPlane.s1 + gy[1] * yPlane.s2 + gy[2] * yPlane.s3;
>       res.s2 += gy[0] * yPlane.s2 + gy[1] * yPlane.s3;
> 
477,478c530,531
<       res1.s2 += gy[2] * R2Next; 
<       res1.s3 += gy[0] * yPlane.s3;
---
>       res.s2 += gy[2] * R2Next; 
>       res.s3 += gy[0] * yPlane.s3;
480c533
<       res1.s3 += gy[1] * R2Next; 
---
>       res.s3 += gy[1] * R2Next; 
482c535
<       res1.s3 += gy[2] * R2Next; 
---
>       res.s3 += gy[2] * R2Next; 
483a537,540
> 
>     yPlaneSrcDt3 -= yPlaneSrcStep*2;
> 
>     ushort4 temp0= convert_ushort4(abs(res));
485d541
<     short4 res2;
490,493c546,550
<       yPlane = convert_char4(vload4(0, yPlaneSrcDt3 + 0 * yPlaneSrcStep + 4 * 0));
<       res2.s0 = gx[0] * yPlane.s0 + gx[1] * yPlane.s1 + gx[2] * yPlane.s2;
<       res2.s1 = gx[0] * yPlane.s1 + gx[1] * yPlane.s2 + gx[2] * yPlane.s3;
<       res2.s2 = gx[0] * yPlane.s2 + gx[1] * yPlane.s3;
---
>       yPlane = vload4(0, yPlaneSrcDt3 + 4 * 0);
>       res.s0 = gx[0] * yPlane.s0 + gx[1] * yPlane.s1 + gx[2] * yPlane.s2;
>       res.s1 = gx[0] * yPlane.s1 + gx[1] * yPlane.s2 + gx[2] * yPlane.s3;
>       res.s2 = gx[0] * yPlane.s2 + gx[1] * yPlane.s3;
> 
495,496c552,553
<       res2.s2 += gx[2] * R2Next; 
<       res2.s3 = gx[0] * yPlane.s3;
---
>       res.s2 += gx[2] * R2Next; 
>       res.s3 = gx[0] * yPlane.s3;
498c555
<       res2.s3 += gx[1] * R2Next; 
---
>       res.s3 += gx[1] * R2Next; 
500c557,558
<       res2.s3 += gx[2] * R2Next; 
---
>       res.s3 += gx[2] * R2Next; 
>       yPlaneSrcDt3 = yPlaneSrcDt3 + yPlaneSrcStep;
504,507c562,566
<       yPlane = convert_char4(vload4(0, yPlaneSrcDt3 + 1 * yPlaneSrcStep + 4 * 0));
<       res2.s0 += gx[0] * yPlane.s0 + gx[1] * yPlane.s1 + gx[2] * yPlane.s2;
<       res2.s1 += gx[0] * yPlane.s1 + gx[1] * yPlane.s2 + gx[2] * yPlane.s3;
<       res2.s2 += gx[0] * yPlane.s2 + gx[1] * yPlane.s3;
---
>       yPlane = vload4(0, yPlaneSrcDt3 + 4 * 0);
>       res.s0 += gx[0] * yPlane.s0 + gx[1] * yPlane.s1 + gx[2] * yPlane.s2;
>       res.s1 += gx[0] * yPlane.s1 + gx[1] * yPlane.s2 + gx[2] * yPlane.s3;
>       res.s2 += gx[0] * yPlane.s2 + gx[1] * yPlane.s3;
> 
509,510c568,569
<       res2.s2 += gx[2] * R2Next; 
<       res2.s3 += gx[0] * yPlane.s3;
---
>       res.s2 += gx[2] * R2Next; 
>       res.s3 += gx[0] * yPlane.s3;
512c571
<       res2.s3 += gx[1] * R2Next; 
---
>       res.s3 += gx[1] * R2Next; 
514c573,574
<       res2.s3 += gx[2] * R2Next; 
---
>       res.s3 += gx[2] * R2Next; 
>       yPlaneSrcDt3 = yPlaneSrcDt3 + yPlaneSrcStep;
518,521c578,582
<       yPlane = convert_char4(vload4(0, yPlaneSrcDt3 + 2 * yPlaneSrcStep + 4 * 0));
<       res2.s0 += gx[0] * yPlane.s0 + gx[1] * yPlane.s1 + gx[2] * yPlane.s2;
<       res2.s1 += gx[0] * yPlane.s1 + gx[1] * yPlane.s2 + gx[2] * yPlane.s3;
<       res2.s2 += gx[0] * yPlane.s2 + gx[1] * yPlane.s3;
---
>       yPlane = vload4(0, yPlaneSrcDt3 + 4 * 0);
>       res.s0 += gx[0] * yPlane.s0 + gx[1] * yPlane.s1 + gx[2] * yPlane.s2;
>       res.s1 += gx[0] * yPlane.s1 + gx[1] * yPlane.s2 + gx[2] * yPlane.s3;
>       res.s2 += gx[0] * yPlane.s2 + gx[1] * yPlane.s3;
> 
523,524c584,585
<       res2.s2 += gx[2] * R2Next; 
<       res2.s3 += gx[0] * yPlane.s3;
---
>       res.s2 += gx[2] * R2Next; 
>       res.s3 += gx[0] * yPlane.s3;
526c587
<       res2.s3 += gx[1] * R2Next; 
---
>       res.s3 += gx[1] * R2Next; 
528c589
<       res2.s3 += gx[2] * R2Next; 
---
>       res.s3 += gx[2] * R2Next; 
530,535c591,600
<     ushort4 temp0;
<     ushort4 temp1;
<     if (gidx == 0 || gidy == 0 || gidx == 1024 - 1 || gidy == 1024 - 1)
<       temp1 = 0;
<     else
<       temp0 = convert_ushort4(abs(res2) + abs(res1));
---
> 
>     temp0 += convert_ushort4(abs(res));
>     if(gidx == 0)
>         temp0.s0 = 0;
> 
>     if(gidx == 255)
>         temp0.s3 = 0;
> 
> 
>     /*
539a605
>     */
545d610
< 
555,556c620,621
<   __global unsigned short * _gtmpDst,
<   __local unsigned int * _ltmp0)
---
>   __global int * _gtmpDst,
>   __local  int * _ltmp0)
576d640
<   __global unsigned short *pEdgeSrcDt1 = (__global char *)pEdgeSrc + pEdgeSrcIdx1;
579c643,645
<   ushort4 _rtmp0;
---
>   //ushort4 _rtmp0;
>   ushort4 _rtmp0=(0,0,0,0);
> 
582,583c648
<   _rtmp0 = *( ( __global ushort4* )pEdgeSrcDt1 );
<   *( _ltmp0 + lid) =    _rtmp0.s0   +    _rtmp0.s1   +    _rtmp0.s2   +    _rtmp0.s3  ;
---
>         _rtmp0 = *( ( __global ushort4* )((__global char *)pEdgeSrc + pEdgeSrcIdx1));
584a650,651
> 
>  *( _ltmp0 + lid) = (int)( _rtmp0.s0   +    _rtmp0.s1   +    _rtmp0.s2   +    _rtmp0.s3)  ;
597,598c664,670
<   {
<       *(_ltmp0 + lid) += *(_ltmp0 + lid + 64);
---
>      *(_ltmp0 + lid) += *(_ltmp0 + lid + 64);
>   }
>   barrier(CLK_LOCAL_MEM_FENCE);
> 
> if ((gidx << 2 ) < pEdgeSrcWidth && gidy < pEdgeSrcHeight)
> {
>   if (lid < 32)
599a672
>   if (lid < 16)
600a674
>   if (lid < 8)
601a676
>   if (lid < 4)
602a678
>   if (lid < 2)
604d679
<     *(_ltmp0 + lid) += *(_ltmp0 + lid + 1);
606c681,683
<   atomic_add((__global int*) _gtmpDst, (int)_ltmp0[0]);
---
>   {
>     *(_ltmp0 + lid) += *(_ltmp0 + lid + 1);
>     atomic_add((__global int*)_gtmpDst, (int)_ltmp0[0]);
609d685
< 
643c719
<   if ( gidx   >=  (1024/4) || gidy >= 1024)
---
>   if (gidx >= 256 || gidy >= 1024)
647,651c723,728
<   int pEdgeSrcIdx4 = pEdgeSrcShift + ((float)gidy) *pEdgeSrcStep + ((float)gidx *4) *sizeof(unsigned short);
<   int yPlaneSrcIdx5 = yPlaneSrcShift + ((float)gidy + -1) *yPlaneSrcStep + ((float)gidx *4 + -1) *sizeof(unsigned char);
<   int yPlaneSrcIdx6 = yPlaneSrcShift + ((float)gidy) *yPlaneSrcStep + ((float)gidx *4) *sizeof(unsigned char);
<   int yPlaneCSERSrcIdx7 = yPlaneCSERSrcShift + ((float)gidy) *yPlaneCSERSrcStep + ((float)gidx *4) *sizeof(unsigned char);
<   int dstDstIdx1 = dstDstShift + ((float)gidy) *dstDstStep + ((float)gidx *4) *sizeof(unsigned char);
---
> 
>   int pEdgeSrcIdx4      = pEdgeSrcShift      + ((float)gidy)    *pEdgeSrcStep      + ((float)gidx*4)    *sizeof(unsigned short);
>   int yPlaneSrcIdx5     = yPlaneSrcShift     + ((float)gidy -1) *yPlaneSrcStep     + ((float)gidx*4 -1) *sizeof(unsigned char);
>   int yPlaneSrcIdx6     = yPlaneSrcShift     + ((float)gidy)    *yPlaneSrcStep     + ((float)gidx*4)    *sizeof(unsigned char);
>   int yPlaneCSERSrcIdx7 = yPlaneCSERSrcShift + ((float)gidy)    *yPlaneCSERSrcStep + ((float)gidx*4)    *sizeof(unsigned char);
>   int dstDstIdx1        = dstDstShift        + ((float)gidy)    *dstDstStep        + ((float)gidx*4)     *sizeof(unsigned char);
654c731
<   __global unsigned short *pEdgeSrcDt4 = (__global char *)pEdgeSrc + pEdgeSrcIdx4;
---
>   __global unsigned short *pEdgeSrcDt4 = (__global unsigned short*)((__global char*)pEdgeSrc + pEdgeSrcIdx4);
668,671d744
<     
<   __global uchar *yPlaneSrcDt5Ptr = yPlaneSrcDt5; 
< ;
<       tans = vload4(0, yPlaneSrcDt5Ptr);
673,674c746,749
<       pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<       pSrcnext = *(yPlaneSrcDt5Ptr +     4);
---
>       tans = vload4(0, yPlaneSrcDt5);
>       pSrctemp = vload4(0, yPlaneSrcDt5);
> 
>       pSrcnext = *(yPlaneSrcDt5 +     4);
679c754
<       pSrcnext = *(yPlaneSrcDt5Ptr +     5);
---
>       pSrcnext = *(yPlaneSrcDt5 +     5);
684d758
<       yPlaneSrcDt5Ptr = yPlaneSrcDt5Ptr + yPlaneSrcStep * 1;
686,689c760,766
<         pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<     tans = max(tans, pSrctemp);
<       pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<       pSrcnext = *(yPlaneSrcDt5Ptr +     4);
---
>       yPlaneSrcDt5 += yPlaneSrcStep * 1;
> 
> 
>       pSrctemp = vload4(0, yPlaneSrcDt5);
>       tans = max(tans, pSrctemp);
> 
>       pSrcnext = *(yPlaneSrcDt5 +     4);
694c771
<       pSrcnext = *(yPlaneSrcDt5Ptr +     5);
---
>       pSrcnext = *(yPlaneSrcDt5 +     5);
699d775
<       yPlaneSrcDt5Ptr = yPlaneSrcDt5Ptr + yPlaneSrcStep * 1;
701,704c777,782
<         pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<     tans = max(tans, pSrctemp);
<       pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<       pSrcnext = *(yPlaneSrcDt5Ptr +     4);
---
>       yPlaneSrcDt5 += yPlaneSrcStep * 1;
> 
>       pSrctemp = vload4(0, yPlaneSrcDt5);
>       tans = max(tans, pSrctemp);
> 
>       pSrcnext = *(yPlaneSrcDt5 +     4);
709c787
<       pSrcnext = *(yPlaneSrcDt5Ptr +     5);
---
>       pSrcnext = *(yPlaneSrcDt5 +     5);
713a792
>     
715,716c794,795
<     uchar4 maxValue;
< maxValue = convert_uchar4( max_ans1 );
---
>       uchar4 maxValue;
>       maxValue = convert_uchar4( max_ans1 );
723,726d801
<     
<   yPlaneSrcDt5Ptr = yPlaneSrcDt5; 
< ;
<       tans = vload4(0, yPlaneSrcDt5Ptr);
728,729c803,808
<       pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<       pSrcnext = *(yPlaneSrcDt5Ptr +     4);
---
>       yPlaneSrcDt5 -= yPlaneSrcStep * 2;
> 
>       tans = vload4(0, yPlaneSrcDt5);
>       pSrctemp = vload4(0, yPlaneSrcDt5);
> 
>       pSrcnext = *(yPlaneSrcDt5 +     4);
734c813
<       pSrcnext = *(yPlaneSrcDt5Ptr +     5);
---
>       pSrcnext = *(yPlaneSrcDt5 +     5);
739d817
<       yPlaneSrcDt5Ptr = yPlaneSrcDt5Ptr + yPlaneSrcStep * 1;
741,744c819,822
<         pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<     tans = min(tans, pSrctemp);
<       pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<       pSrcnext = *(yPlaneSrcDt5Ptr +     4);
---
>       yPlaneSrcDt5 += yPlaneSrcStep * 1;
>       pSrctemp = vload4(0, yPlaneSrcDt5);
>       tans = min(tans, pSrctemp);
>       pSrcnext = *(yPlaneSrcDt5 +     4);
749c827
<       pSrcnext = *(yPlaneSrcDt5Ptr +     5);
---
>       pSrcnext = *(yPlaneSrcDt5 +     5);
754d831
<       yPlaneSrcDt5Ptr = yPlaneSrcDt5Ptr + yPlaneSrcStep * 1;
756,759c833,836
<         pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<     tans = min(tans, pSrctemp);
<       pSrctemp = vload4(0, yPlaneSrcDt5Ptr);
<       pSrcnext = *(yPlaneSrcDt5Ptr +     4);
---
>       yPlaneSrcDt5 += yPlaneSrcStep * 1;
>       pSrctemp = vload4(0, yPlaneSrcDt5);
>       tans = min(tans, pSrctemp);
>       pSrcnext = *(yPlaneSrcDt5 +     4);
764c841
<       pSrcnext = *(yPlaneSrcDt5Ptr +     5);
---
>       pSrcnext = *(yPlaneSrcDt5 +     5);
770,778c847,858
<     uchar4 minValue;
< minValue = convert_uchar4( min_ans1 );
<     uchar4 Op_ans1 =  *((__global uchar4*) yPlaneSrcDt6) - *((__global uchar4*)yPlaneCSERSrcDt7);
<     float4 pError;
< pError = convert_float4( Op_ans1 );
<     ushort4 Op_ans2 =  *((__global ushort4*) pEdgeSrcDt4) * *((__global ushort4*)pEdgeSrcDt4);
<       ushort4 MatrixSub_ans1 = *(pEdgeSrcDt4);
<       ushort4 MatrixSub_ans2 = *(pEdgeSrcDt4);
<     float4 edge2Order = convert_float4(convert_ushort4(Op_ans2) * MatrixSub_ans1 * MatrixSub_ans2);
---
>       uchar4 minValue;
>       minValue = convert_uchar4( min_ans1 );
> 
> 
> 
>     float4 pError = convert_float4(*((__global uchar4*)yPlaneSrcDt6)) - convert_float4(*((__global uchar4 *)yPlaneCSERSrcDt7));
>     
> 
>     float4 Op = convert_float4(*((__global short4*)pEdgeSrcDt4));
>     float4 edge2Order = Op * Op *Op *Op; 
> 
> 
781,784c861,871
<     strength = convert_float4((enhancedF - 1) / (enhancedF * strength) + 1);
<       uchar4 MatrixSub_ans3 = *(yPlaneCSERSrcDt7);
<     enhancedF = convert_float4(pError * strength + convert_float4(MatrixSub_ans3));
<     strength = convert_float4((0.0500000007F * edge2Order + cutoff2Order) / (cutoff2Order + edge2Order));
---
>     strength = convert_float4((enhancedF - 1) / (convert_float4(enhancedF * strength)) + 1);
> 
>     //uchar4 MatrixSub_ans3 = *(yPlaneCSERSrcDt7);
>     //enhancedF = convert_float4(convert_uchar4(pError * strength) + MatrixSub_ans3);
> 
>     float4 yPlaneCESR4 = convert_float4(*((__global uchar4 *)(yPlaneCSERSrcDt7)));
>     enhancedF = convert_float4(convert_int4(pError * strength + yPlaneCESR4));//////////////////////
> 
> 
>       strength = convert_float4((0.05f * edge2Order + cutoff2Order) / (cutoff2Order + edge2Order));
> 
786,787c873,877
<     edge2Order = convert_float4(convert_float4(minValue) - strength * (convert_float4(minValue) - enhancedF));
<     strength = convert_float4(convert_float4(maxValue) + strength * (enhancedF - convert_float4(maxValue)));
---
> 
>     edge2Order = convert_float4(minValue) +(- strength) * (convert_float4(minValue) - enhancedF);
> 
> 
>     strength = convert_float4(maxValue)+ (strength * (enhancedF - convert_float4(maxValue)));
789c879,881
<     edge2Order = convert_float4(enhancedF < convert_float4(minValue) ? (edge2Order > 0 ? edge2Order : 0) : pSharpness_value);
---
> 
>     edge2Order = (enhancedF < convert_float4(minValue) ? (edge2Order > 0 ? edge2Order : 0) : pSharpness_value);
> 
791a884
> 
