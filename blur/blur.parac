#include<stdio.h>
#include<stdlib.h>
#include<stdint.h>

#define WIDTH 4802 
#define HEIGHT  6408

void blur(parac_matrix uint16_t &in[HEIGHT][WIDTH], 
    parac_matrix uint16_t &intermediate[HEIGHT][WIDTH], 
    parac_matrix uint16_t &out[HEIGHT][WIDTH] )
{

  parac_iterator it(iter_element; 0:HEIGHT:1; 1:WIDTH-1:1 )
  {
    intermediate[itx][ity] = (in[itx][ity-1] + in[itx][ity] + in[itx][ity+1])/3.0;
  }

  parac_iterator it1(iter_element; 1:HEIGHT-1:1; 0:WIDTH:1 )
  {
    out[it1x][it1y] = (in[it1x-1][it1y] + in[it1x][it1y] + in[it1x+1][it1y])/3.0;
  }



}

void blur_conv(parac_matrix uint16_t &in[HEIGHT][WIDTH], 
    parac_matrix uint16_t &intermediate[HEIGHT][WIDTH], 
    parac_matrix uint16_t &out[HEIGHT][WIDTH] )
{
  parac_matrix uint16_t filter_h[1][3] = {1/3.0, 1/3.0, 1/3.0};
  parac_matrix uint16_t filter_v[3][1] = {1/3.0, 1/3.0, 1/3.0};

  parac_iterator it(iter_element; 0:HEIGHT:1; 1:WIDTH-1:1 )
  {
    intermediate[itx][ity] = convolution(filter_h, in[itx][ity-1:3:1]);
  }

  parac_iterator it1(iter_element; 1:HEIGHT-1:1; 0:WIDTH:1 )
  {
    out[it1x][it1y] = convolution(filter_v, intermediate[it1x-1:3:1][it1y]);
  }



}




int main()
{
 uint16_t *input = (uint16_t *) malloc( sizeof(uint16_t) * WIDTH*HEIGHT );
 uint16_t *meta = (uint16_t *) malloc( sizeof(uint16_t) *WIDTH *HEIGHT );
 uint16_t *output = (uint16_t *) malloc( sizeof(uint16_t) * WIDTH*HEIGHT );
 for( int i = 0; i < HEIGHT; i++)
   for(int j = 0; j < WIDTH; j++) 
   input[i*WIDTH+j] = rand()%0xfff;

 parac_matrix uint16_t &src[HEIGHT][WIDTH] = input;
 parac_matrix uint16_t &intermediate[HEIGHT][WIDTH] = meta;
 parac_matrix uint16_t &dst[HEIGHT][WIDTH] = output;

  blur(src, intermediate, dst);


}
