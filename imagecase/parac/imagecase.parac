#define ROWS 256
#define COLS 256
#define RATE 0.8
#define M 256
#define N 256
#define SIZE 3
//M is height, N is width

#define MRATE 205
#define NRATE 205 


void rgb2grey(parac_matrix char& oimage[M][N*3],parac_matrix char& mimage[M][N])
{
    parac_matrix float arg[1][3] = {0.299,0.587,0.114};
    parac_iterator it(iter_element;0:M:1;0:N:1){
      //mimage[itx][ity] = convolution(oimage[itx][ity*3:3:1],arg);
      mimage[itx][ity] = convolution(oimage[itx][ity:3:1],arg);
    }
}

//void resizeImage(parac_matrix char& mimage[M][N],parac_matrix char& dimage[M*RATE][N*RATE])
void resizeImage(parac_matrix char& mimage[M][N],parac_matrix char& dimage[MRATE][NRATE])
{
    double rotate = 1/RATE;
    parac_iterator it(iter_element;0:M*RATE:1; 0:N*RATE:1)
    {
        int r1=(int)(itx*rotate);
        int r2=min(M-1,r1+1);
        double p=itx*rotate-r1;

        int c1=(int)(ity*rotate);
        int c2=min(N-1,c1+1);
        double q=ity*rotate-c1;
        //dimage[itx][ity]=(1-p)*(1-q)*mimage[r1*COLS+c1]+(1-p)*q*mimage[r1*COLS+c2]+p*(1-q)*mimage[r2*COLS+c1]+p*q*mimage[r2*COLS+c2];
        dimage[itx][ity]=(1-p)*(1-q)*mimage[r1][c1]+(1-p)*q*mimage[r1][c2]+p*(1-q)*mimage[r2][c1]+p*q*mimage[r2][c2];
    }

}

//void convolutionImage(parac_matrix char& dimage[M*RATE][N*RATE],parac_matrix char& dsmage[M*RATE][N*RATE],parac_matrix float& kernel[SIZE][SIZE])
#if 0
void convolutionImage(parac_matrix char& dimage[MRATE][NRATE],parac_matrix char& dsmage[MRATE][NRATE],parac_matrix float& kernel[SIZE][SIZE])
{
  float sum1= 1.0;
  float sum = 0.0;

  parac_border_rule br
  {
    dimage[*][-1] = 0;
    dimage[*][+1] = 0;
    dimage[-1][*] = 0;
    dimage[+1][*] = 0;
  }

  parac_iterator it(iter_element; 0:M*RATE:1; 0:N*RATE:1) parac_border_rule(br)
  {
    if(itx == 0 || itx == M*RATE-1)
      sum1 -= (1/9)*3;

    if(ity == 0 ||ity == M*RATE-1)
    {
      sum1 -= (1/9) * 3;
      if(itx == 0 || itx == M*RATE-1)
        sum1+=1/9;
    }

    //sum=convolution(kernel,dimage[itx-1:3:1][ity-1:3:1]);
    sum = dsmage[itx][ity] =convolution(kernel,dimage[itx-1:3:1][ity-1:3:1]);
    dsmage[itx][ity]= sum1 == 1? sum : sum/sum1;			
  }
}
#endif

void convolutionImage(char dimage[MRATE][NRATE], char dsmage[MRATE][NRATE], float kernel[SIZE][SIZE])
{
    float sum1=1.0;
    float sum = 0.0;
#if 0
    {  
        Src[][-1] = 0;
        Src[][+1] = 0;
        Src[-1][] = 0;
        Src[+1][] = 0;

        dimage[*][-1] = 0;
        dimage[*][+1] = 0;
        dimage[-1][*] = 0;
        dimage[+1][*] = 0;
    }
#endif

    for(int i = 0; i < M*RATE; i++){
        for(int j = 0; j < N*RATE; j++){
            if(i == 0 || i == M*RATE-1)
          sum1 -= (1/9)*3;

        if(j == 0 ||j == M*RATE-1)
        {
          sum1 -= (1/9) * 3;
          if(i == 0 || i == M*RATE-1)
            sum1+=1/9;
        }
        if(i == 0){         // border condition 1
          if(j == 0){
            sum = kernel[0][0] * 0 + kernel[0][1] * 0 + kernel[0][2] * 0;
            sum += kernel[1][0] * 0 + kernel[1][1] * dimage[0][0] + kernel[1][2] * dimage[0][1];
            sum += kernel[2][0] * 0 + kernel[2][1] * dimage[1][0] + kernel[2][2] * dimage[1][1];
          } else if(j == NRATE-1){
            sum = kernel[0][0] * 0 + kernel[0][1] * 0 + kernel[0][2] * 0;
            sum += kernel[1][0] * dimage[0][NRATE-2] + kernel[1][1] * dimage[0][NRATE-1] + kernel[1][2] * 0;
            sum += kernel[2][0] * dimage[1][NRATE-2] + kernel[2][1] * dimage[1][NRATE-2] + kernel[2][2] * 0;
          } else {
              sum = kernel[0][0] * 0 + kernel[0][1] * 0 + kernel[0][2] * 0;
              sum += kernel[1][0] * dimage[i][j-1] + kernel[1][1] * dimage[i][j] + kernel[1][2] * dimage[i][j+1];
              sum += kernel[2][0] * dimage[i+1][j-1] + kernel[2][1] * dimage[i+1][j] + kernel[2][2] * dimage[i+1][j+1];
          }
        } else if(i == MRATE-1){   // border condition 2
          if(j == 0){
            sum = kernel[0][0] * 0 + kernel[0][1] * dimage[MRATE-2][0] + kernel[0][2] * dimage[MRATE-2][1];
            sum += kernel[1][0] * 0 + kernel[1][1] * dimage[MRATE-1][0] + kernel[1][2] * dimage[MRATE-1][1];
            sum += kernel[2][0] * 0 + kernel[2][1] * 0 + kernel[2][2] * 0;
          } else if(j == NRATE - 1){
            sum = kernel[0][0] * dimage[MRATE-2][NRATE-2] + kernel[0][1] * dimage[MRATE-2][NRATE-1] + kernel[0][2] * 0;
            sum += kernel[1][0] * dimage[MRATE-1][NRATE-2] + kernel[1][1] * dimage[MRATE-1][NRATE-1] + kernel[1][2] * 0;
            sum += kernel[2][0] * 0 + kernel[2][1] * 0 + kernel[2][2] * 0;
          } else {
            sum = kernel[0][0] * dimage[i-1][j-1] + kernel[0][1] * dimage[i-1][j] + kernel[0][2] * dimage[i-1][j+1];
            sum += kernel[1][0] * dimage[i][j-1] + kernel[1][1] * dimage[i][j] + kernel[1][2] * dimage[i][j+1];
            sum += kernel[2][0] * 0 + kernel[2][1] * 0 + kernel[2][2] * 0;
          }
        } else if(i > 0 && i < MRATE-1){   // border condition 3
          if(j == 0){
            sum = kernel[0][0] * 0 + kernel[0][1] * dimage[i-1][0] + kernel[0][2] * dimage[i-1][1];
            sum += kernel[1][0] * 0 + kernel[1][1] * dimage[i][0] + kernel[1][2] * dimage[i][1];
            sum += kernel[2][0] * 0 + kernel[2][1] * dimage[i+1][0] + kernel[2][2] * dimage[i+1][1];
          } else if(j == NRATE - 1){
            sum = kernel[0][0] * dimage[i-1][NRATE-2] + kernel[0][1] * dimage[i-1][NRATE-1] + kernel[0][2] * 0;
            sum += kernel[1][0] * dimage[i][NRATE-2] + kernel[1][1] * dimage[i][NRATE-1] + kernel[1][2] * 0;
            sum += kernel[2][0] * dimage[i+1][NRATE-2] + kernel[2][1] * dimage[i+1][NRATE-1] + kernel[2][2] * 0;
          }
        } else {      // normal
            sum = kernel[0][0] * dimage[i-1][j-1] + kernel[0][1] * dimage[i-1][j] + kernel[0][2] * dimage[i-1][j+1];
            sum += kernel[1][0] * dimage[i][j-1] + kernel[1][1] * dimage[i][j] + kernel[1][2] * dimage[i][j+1];
            sum += kernel[2][0] * dimage[i+1][j-1] + kernel[2][1] * dimage[i+1][j] + kernel[2][2] * dimage[i+1][j+1];
        } 
        dsmage[i][j]= sum1 == 1? sum : sum/sum1;			
      }
    }
}


int main()
{
   
    int rROWS=ROWS*RATE;
    int rCOLS=COLS*RATE;
    int size=3;
    
    char *src=(char *)malloc(sizeof(char)*ROWS*COLS*3);
    char *mid=(char *)malloc(sizeof(char)*ROWS*COLS);
    char *dst=(char *)malloc(sizeof(char)*MRATE*NRATE);
    char *ddt=(char *)malloc(sizeof(char)*MRATE*NRATE);

    char *p=src;

    for(int i=0;i<ROWS*COLS*3;i++)
        *p++=rand()%100+1;

    parac_matrix char& oimage[ROWS][COLS*3] = src;
    parac_matrix char& mimage[ROWS][COLS]   = mid;
    parac_matrix char& dimage[MRATE][NRATE] = dst;
    parac_matrix char& dsmage[MRATE][NRATE] = ddt;


    parac_matrix float kernel[SIZE][SIZE]={1,2,1,2,4,2,1,2,1};//waitting for filling
    float kernel_cpu[3][3] = {1,2,1,2,4,2,1,2,1};

    for(int i=0;i<size;i++)
        for(int j=0;j<size;j++)
        kernel[i][j]=kernel[i][j]/16;


    rgb2grey(oimage,mimage);

    resizeImage(mimage,dimage);

    // For iterator. dst ddt
    //convolutionImage(dimage,dsmage,kernel);

    convolutionImage((char(*)[NRATE])dst,(char(*)[NRATE])ddt,(float(*)[3])kernel_cpu);

    return 0;
}

